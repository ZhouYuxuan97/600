import numpy as np
import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()
import os
from os import listdir
from os.path import isfile, join
from random import randint
import re
import datetime

os.environ["CUDA_VISIBLE_DEVICES"] = "-1"
wordsList = np.load('./training_data/wordsList.npy')
print('Loaded the word list!')
wordsList = wordsList.tolist()
wordsList = [word.decode('UTF-8') for word in wordsList]
wordVectors = np.load('./training_data/wordVectors.npy')
print('Load the word vectors!')


print(len(wordsList))
print(wordVectors.shape)
baseballIndex = wordsList.index('baseball')
wordVectors[baseballIndex]
print(wordVectors[baseballIndex])

maxSeqLength = 10 #Maximum length of sentence
numDimensions = 300 #Dimensions for each word vector

firstSentence = np.zeros((maxSeqLength), dtype='int32')
firstSentence[0] = wordsList.index("i")
firstSentence[1] = wordsList.index("thought")
firstSentence[2] = wordsList.index("the")
firstSentence[3] = wordsList.index("movie")
firstSentence[4] = wordsList.index("was")
firstSentence[5] = wordsList.index("incredible")
firstSentence[6] = wordsList.index("and")
firstSentence[7] = wordsList.index("inspiring")
#firstSentence[8] and firstSentence[9] are going to be 0
print(firstSentence.shape)
print(firstSentence) #Shows the row index for each word

with tf.compat.v1.Session() as sess:
    print(tf.nn.embedding_lookup(wordVectors,firstSentence).eval().shape)


# positiveFiles = ['positiveReviews/' + f for f in listdir('./training_data/positiveReviews/') if isfile(join('positiveReviews/', f))]
# negativeFiles = ['negativeReviews/' + f for f in listdir('./training_data/negativeReviews/') if isfile(join('negativeReviews/', f))]
numWords = []
# for pf in positiveFiles:
#     with open(pf, "r", encoding='utf-8') as f:
#         line=f.readline()
#         counter = len(line.split())
#         numWords.append(counter)
posPath = "./training_data/positiveReviews"
posFiles= os.listdir(posPath)
for pf in posFiles:
    f = open(posPath+"/"+pf,'r', encoding='UTF-8')
    line=f.readline()
    counter = len(line.split())
    numWords.append(counter)
print('Positive files finished')

negPath = "./training_data/negativeReviews"
negFiles= os.listdir(negPath)
for nf in negFiles:
    f = open(negPath+"/"+nf,'r', encoding='UTF-8')
    line=f.readline()
    counter = len(line.split())
    numWords.append(counter)
# for nf in negativeFiles:
#     with open(nf, "r", encoding='utf-8') as f:
#         line=f.readline()
#         counter = len(line.split())
#         numWords.append(counter)
print('Negative files finished')

numFiles = len(numWords)
print('The total number of files is', numFiles)
print('The total number of words in the files is', sum(numWords))
print('The average number of words in the files is', sum(numWords)/len(numWords))

# import matplotlib.pyplot as plt
# #%matplotlib inline
# plt.hist(numWords, 50)
# plt.xlabel('Sequence Length')
# plt.ylabel('Frequency')
# plt.axis([0, 1200, 0, 8000])
# plt.show()

maxSeqLength = 250

strip_special_chars = re.compile("[^A-Za-z0-9 ]+")

def cleanSentences(string):
    string = string.lower().replace("<br />", " ")
    return re.sub(strip_special_chars, "", string.lower())

# ids = np.zeros((numFiles, maxSeqLength), dtype='int32')
#
# fileCounter = 0
# for pf in posFiles:
#    with open(posPath+"/"+pf,'r', encoding='UTF-8') as f:
#        indexCounter = 0
#        line=f.readline()
#        cleanedLine = cleanSentences(line)
#        split = cleanedLine.split()
#        for word in split:
#            try:
#                ids[fileCounter][indexCounter] = wordsList.index(word)
#            except ValueError:
#                ids[fileCounter][indexCounter] = 399999 #Vector for unkown words
#            indexCounter = indexCounter + 1
#            if indexCounter >= maxSeqLength:
#                break
#        fileCounter = fileCounter + 1
#        print(fileCounter)
#
# for nf in negFiles:
#    with open(negPath+"/"+nf,'r', encoding='UTF-8') as f:
#        indexCounter = 0
#        line=f.readline()
#        cleanedLine = cleanSentences(line)
#        split = cleanedLine.split()
#        for word in split:
#            try:
#                ids[fileCounter][indexCounter] = wordsList.index(word)
#            except ValueError:
#                ids[fileCounter][indexCounter] = 399999 #Vector for unkown words
#            indexCounter = indexCounter + 1
#            if indexCounter >= maxSeqLength:
#                break
#        fileCounter = fileCounter + 1
#        print(fileCounter)
# #Pass into embedding function and see if it evaluates.
#
# np.save('idsMatrix', ids)

ids = np.load('idsMatrix.npy')

batchSize = 24
lstmUnits = 64
numClasses = 2
iterations = 50000

def getTrainBatch():
    labels = []
    arr = np.zeros([batchSize, maxSeqLength])
    for i in range(batchSize):
        if (i % 2 == 0):
            num = randint(1,11499)
            labels.append([1,0])
        else:
            num = randint(13499,24999)
            labels.append([0,1])
        arr[i] = ids[num-1:num]
    return arr, labels

# def getTestBatch(index):
#     labels = []
#     arr = np.zeros([batchSize, maxSeqLength])
#     for i in range(batchSize):
#         num = randint(11499,13499)
#         if (num <= 12499):
#             labels.append([1,0])
#         else:
#             labels.append([0,1])
#         arr[i] = ids[num-1:num]
#     return arr, labels

def getTestBatch(index):
    labels = []
    arr = np.zeros([batchSize, maxSeqLength])
    for i in range(batchSize):
        num = batchSize*index+i+11499
        if (num <= 12499):
            labels.append([1,0])
        else:
            labels.append([0,1])
        arr[i] = ids[num-1:num]
    return arr, labels

tf.compat.v1.reset_default_graph()
tf.compat.v1.disable_eager_execution()
labels = tf.compat.v1.placeholder(tf.float32, [batchSize, numClasses])
input_data = tf.compat.v1.placeholder(tf.int32, [batchSize, maxSeqLength])

data = tf.Variable(tf.zeros([batchSize, maxSeqLength, numDimensions]),dtype=tf.float32)
data = tf.nn.embedding_lookup(wordVectors,input_data)

lstmCell = tf.nn.rnn_cell.BasicLSTMCell(lstmUnits)
lstmCell = tf.nn.rnn_cell.DropoutWrapper(cell=lstmCell, output_keep_prob=0.75)
value, _ = tf.nn.dynamic_rnn(lstmCell, data, dtype=tf.float32)

weight = tf.Variable(tf.truncated_normal([lstmUnits, numClasses]))
bias = tf.Variable(tf.constant(0.1, shape=[numClasses]))
value = tf.transpose(value, [1, 0, 2])
last = tf.gather(value, int(value.get_shape()[0]) - 1)
prediction = (tf.matmul(last, weight) + bias)

correctPred = tf.equal(tf.argmax(prediction,1), tf.argmax(labels,1))
accuracy = tf.reduce_mean(tf.cast(correctPred, tf.float32))

loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=prediction, labels=labels))
optimizer = tf.train.AdamOptimizer().minimize(loss)


tf.summary.scalar('Loss', loss)
tf.summary.scalar('Accuracy', accuracy)
merged = tf.summary.merge_all()
logdir = "tensorboard/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S") + "/"
writer = tf.summary.FileWriter(logdir, sess.graph)

sess = tf.InteractiveSession()
saver = tf.train.Saver()
sess.run(tf.global_variables_initializer())

for i in range(iterations):
   #Next Batch of reviews
   nextBatch, nextBatchLabels = getTrainBatch();
   sess.run(optimizer, {input_data: nextBatch, labels: nextBatchLabels})

   #Write summary to Tensorboard
   if ((i+1) % 50 == 0):
       summary = sess.run(merged, {input_data: nextBatch, labels: nextBatchLabels})
       writer.add_summary(summary, i)

   if((i+1) % 1000 == 0):
       loss_ = sess.run(loss, {input_data: nextBatch, labels:nextBatchLabels})
       accuracy_ = sess.run(accuracy, {input_data: nextBatch, labels:nextBatchLabels})

       print("iteration {}/{}...".format(i+1, iterations),
             "loss {}...".format(loss_),
             "accuracy {}...".format(accuracy_))

   #Save the network every 10,000 training iterations
   if ((i+1) % 10000 == 0):
       save_path = saver.save(sess, "models/pretrained_lstm.ckpt", global_step=i)
       print("saved to %s" % save_path)
writer.close()

sess = tf.InteractiveSession()
saver = tf.train.Saver()
saver.restore(sess, tf.train.latest_checkpoint('models'))



iterations = 10
for i in range(iterations):
    acc = 0
    for j in range(83):
        nextBatch, nextBatchLabels = getTestBatch(j);
        acc +=  (sess.run(accuracy, {input_data: nextBatch, labels: nextBatchLabels})) * 100
        # print("Accuracy for this batch:", (sess.run(accuracy, {input_data: nextBatch, labels: nextBatchLabels})) * 100)
    print("Accuracy for iteration {} : {}".format(i+1 , acc/83))
